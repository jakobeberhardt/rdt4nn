name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'images/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'images/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-changes: ${{ steps.set-matrix.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: images/**
          dir_names: true
          dir_names_max_depth: 4

      - name: Set matrix for changed image directories
        id: set-matrix
        run: |
          echo "Changed directories: ${{ steps.changed-files.outputs.all_changed_files }}"
          
          # Initialize array for image directories
          image_dirs=()
          
          # Process each changed directory
          for dir in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Processing directory: $dir"
            
            # Find directories that contain a Dockerfile
            if [ -f "$dir/Dockerfile" ]; then
              # Extract the tag from the directory path
              # Remove 'images/' prefix and use the rest as tag
              tag=$(echo "$dir" | sed 's|^images/||')
              
              # Add to array as JSON object
              image_dirs+=("{\"directory\":\"$dir\",\"tag\":\"$tag\"}")
              echo "Found image directory: $dir -> tag: $tag"
            else
              # Check if any subdirectories contain Dockerfiles
              find "$dir" -name "Dockerfile" -type f | while read dockerfile; do
                dockerfile_dir=$(dirname "$dockerfile")
                tag=$(echo "$dockerfile_dir" | sed 's|^images/||')
                image_dirs+=("{\"directory\":\"$dockerfile_dir\",\"tag\":\"$tag\"}")
                echo "Found image directory: $dockerfile_dir -> tag: $tag"
              done
            fi
          done
          
          # Alternative approach: scan all changed files and find their containing directories with Dockerfiles
          changed_image_dirs=()
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            # Get the directory of the changed file
            file_dir=$(dirname "$file")
            
            # Walk up the directory tree to find a Dockerfile
            current_dir="$file_dir"
            while [ "$current_dir" != "images" ] && [ "$current_dir" != "." ]; do
              if [ -f "$current_dir/Dockerfile" ]; then
                tag=$(echo "$current_dir" | sed 's|^images/||')
                # Check if we haven't already added this directory
                if [[ ! " ${changed_image_dirs[@]} " =~ " {\"directory\":\"$current_dir\",\"tag\":\"$tag\"} " ]]; then
                  changed_image_dirs+=("{\"directory\":\"$current_dir\",\"tag\":\"$tag\"}")
                  echo "Found changed image directory: $current_dir -> tag: $tag"
                fi
                break
              fi
              current_dir=$(dirname "$current_dir")
            done
          done
          
          # Create JSON array
          if [ ${#changed_image_dirs[@]} -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          else
            echo "has-changes=true" >> $GITHUB_OUTPUT
            matrix_json="{\"include\":["
            for i in "${!changed_image_dirs[@]}"; do
              if [ $i -gt 0 ]; then
                matrix_json+=","
              fi
              matrix_json+="${changed_image_dirs[$i]}"
            done
            matrix_json+="]}"
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
            echo "Generated matrix: $matrix_json"
          fi

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract registry info
        id: registry-info
        run: |
          tag="${{ matrix.tag }}"
          echo "Full tag: $tag"
          
          # Extract registry (everything before the first '/')
          if [[ "$tag" == *"/"* ]]; then
            registry=$(echo "$tag" | cut -d'/' -f1)
            echo "registry=$registry" >> $GITHUB_OUTPUT
            echo "Registry: $registry"
          else
            echo "registry=docker.io" >> $GITHUB_OUTPUT
            echo "Registry: docker.io (default)"
          fi
          
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.registry-info.outputs.registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.directory }}
          file: ${{ matrix.directory }}/Dockerfile
          push: true
          tags: |
            ${{ matrix.tag }}:latest
            ${{ matrix.tag }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo "Image pushed successfully with tag ${{ matrix.tag }}"
