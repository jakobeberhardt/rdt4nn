name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
    paths:
      - 'images/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'images/**'

jobs:
  find-images:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find all Dockerfiles and create matrix
        id: set-matrix
        run: |
          echo "Finding all Dockerfiles in images/ directory..."
          
          # Find all directories containing Dockerfiles
          image_dirs=()
          while IFS= read -r -d '' dockerfile; do
            # Get the directory containing the Dockerfile
            dir=$(dirname "$dockerfile")
            # Extract tag by removing 'images/' prefix
            tag=$(echo "$dir" | sed 's|^images/||')
            
            image_dirs+=("{\"directory\":\"$dir\",\"tag\":\"$tag\"}")
            echo "Found image: $dir -> tag: $tag"
          done < <(find images -name "Dockerfile" -type f -print0)
          
          # Create JSON matrix
          if [ ${#image_dirs[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No Dockerfiles found in images/ directory"
          else
            matrix_json="{\"include\":["
            for i in "${!image_dirs[@]}"; do
              if [ $i -gt 0 ]; then
                matrix_json+=","
              fi
              matrix_json+="${image_dirs[$i]}"
            done
            matrix_json+="]}"
            echo "matrix=$matrix_json" >> $GITHUB_OUTPUT
            echo "Generated matrix for ${#image_dirs[@]} images: $matrix_json"
          fi

  build-and-push:
    needs: find-images
    if: needs.find-images.outputs.matrix != '{"include":[]}'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.find-images.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract registry info
        id: registry-info
        run: |
          tag="${{ matrix.tag }}"
          echo "Full tag: $tag"
          
          # Extract registry (everything before the first '/')
          if [[ "$tag" == *"/"* ]]; then
            registry=$(echo "$tag" | cut -d'/' -f1)
            echo "registry=$registry" >> $GITHUB_OUTPUT
            echo "Registry: $registry"
          else
            echo "registry=docker.io" >> $GITHUB_OUTPUT
            echo "Registry: docker.io (default)"
          fi
          
          echo "tag=$tag" >> $GITHUB_OUTPUT

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.registry-info.outputs.registry }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.directory }}
          file: ${{ matrix.directory }}/Dockerfile
          push: true
          tags: |
            ${{ matrix.tag }}:latest
            ${{ matrix.tag }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Image digest
        run: echo "Image pushed successfully with tag ${{ matrix.tag }}"
